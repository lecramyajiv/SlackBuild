#!/bin/bash

# Slackware build script for ffmpeg

# Copyright 2010-2017  Heinz Wiesinger, Amsterdam, The Netherlands
# Copyright 2017, 2018  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Originally written by core (eroc@linuxmail.org)
# Modified by Robby Workman <rworkman@slackbuilds.org>

cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=ffmpeg
VERSION=${VERSION:-$(echo $PKGNAM-*.tar.xz | rev | cut -f 3- -d . | cut -f 1 -d - | rev)}
BUILD=${BUILD:-1}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

TMP=${TMP:-/tmp}
PKG=$TMP/package-$PKGNAM

NUMJOBS=${NUMJOBS:-" -j$(expr $(nproc) + 1) "}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -march=native -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

# If PulseAudio is not found, use the _alsa $TAG and disable it in the build:
if [ ! -r /usr/lib${LIBDIRSUFFIX}/pkgconfig/libpulse.pc ]; then
  TAG="_alsa"
  PULSEAUDIO=no
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-$BUILD$TAG.txz"
  exit 0
fi


# Configure ffmpeg features not autodetected by default.
# You can enable a lot of optional (not-autodetected) features by
# passing variables to the script (VAR=yes/no ./ffmpeg.SlackBuild).
# Unfortunately ffmpeg's configure doesn't support --enable-feature=yes
# syntax, so we have to do it the complicated way :/
# Additional optional (autodetected) dependencies are:
# - bzip2
# - libva
# - libvdpau
# - libX11
# - libxcb
# - nvdec/nvenc
# - sdl2
# - xz
# - zlib

# Additional  dependencies
# By default or from SBo

runtime=""  ; [ "${runtime:-yes}"   != "no" ]        && runtime="--enable-runtime-cpudetect"
pthread=""  ; [ "${pthread:-yes}"   != "no" ]        && pthread="--enable-pthreads"
bzlib=""    ; [ "${bzlib:-yes}"     != "no" ]        && bzlib="--enable-bzlib"
gcrypt=""   ; [ "${gcrypt:-yes}"    != "no" ]        && gcrypt="--enable-gcrypt"
gmp=""      ; [ "${gmp:-yes}"       != "no" ]        && gmp="--enable-gmp"
xcb=""      ; [ "${xcb:-yes}"       != "no" ]        && xcb="--enable-libxcb"
xcbshm=""   ; [ "${xcbshm:-yes}"    != "no" ]        && xcbshm="--enable-libxcb-shm"
xfixes=""   ; [ "${xfixes:-yes}"    != "no" ]        && xfixes="--enable-libxcb-xfixes"
xshape=""   ; [ "${xshape:-yes}"    != "no" ]        && xshape="--enable-libxcb-shape"
lzma=""     ; [ "${lzma:-yes}"      != "no" ]        && lzma="--enable-lzma"
xlib=""     ; [ "${xlib:-yes}"      != "no" ]        && xlib="--enable-xlib"
zlib=""     ; [ "${zlib:-yes}"      != "no" ]        && zlib="--enable-zlib"
iconv=""    ; [ "${iconv:-yes}"     != "no" ]        && iconv="--enable-iconv"
mfx=""      ; [ "${mfx:-yes}"       != "no" ]        && mfx="--enable-libmfx"
vaapi=""    ; [ "${vaapi:-yes}"     != "no" ]        && vaapi="--enable-vaapi"
vdpau=""    ; [ "${vdpau:-yes}"     != "no" ]        && vdpau="--enable-vdpau"
jni=""      ; [ "${jni:-no}"        != "no" ]        && jni="--enable-jni"
pproc=""    ; [ "${pproc:-yes}"     != "no" ]        && pproc="--enable-postproc"
sdl2=""     ; [ "${sdl2:-yes}"      != "no" ]        && sdl2="--enable-sdl2"

#
#
# Developer options

resilience="" ; [ "${resilience:-yes}" != "no" ]      && resilience="--enable-error-resilience"
network=""  ; [ "${network:-yes}"   != "no" ]         && network="--enable-network"
mem=""      ; [ "${mem:-yes}"       != "no" ]         && mem="--enable-memory-poisoning"
ftrapv=""   ; [ "${ftrapv:-yes}"    != "no" ]         && ftrapv="--enable-ftrapv"
perf=""     ; [ "${perf:-yes}"      != "no" ]         && perf="--enable-linux-perf"

# Not in slackware or in SBo

avisynth="" ; [ "${avisynth:-yes}"  != "no" ]        && avisynth="--enable-avisynth"
aribb24=""  ; [ "${aribb24:-yes}"   != "no" ]        && aribb24="--enable-libaribb24"
davs2=""    ; [ "${davs2:-yes}"     != "no" ]        && davs2="--enable-libdavs2"
kvazaar=""  ; [ "${kvazaar:-yes}"   != "no" ]        && kvazaar="--enable-libkvazaar"
rist=""     ; [ "${rist:-yes}"      != "no" ]        && rist="--enable-librist"
svtav1=""   ; [ "${svtav1:-yes}"    != "no" ]        && svtav1="--enable-libsvtav1"
uavs3d=""   ; [ "${uavs3d:-yes}"    != "no" ]        && uavs3d="--enable-libuavs3d"
vmaf=""     ; [ "${vmaf:-yes}"      != "no" ]        && vmaf="--enable-libvmaf"
voamr=""    ; [ "${voamr:-yes}"     != "no" ]        && voamr="--enable-libvo-amrwbenc"
xavs2=""    ; [ "${xavs2:-yes}"     != "no" ]        && xavs2="--enable-libxavs2"
mysofa=""   ; [ "${mysofa:-yes}"    != "no" ]        && mysofa="--enable-libmysofa"
psphinx=""  ; [ "${psphinx:-yes}"   != "no" ]        && psphinx="--enable-pocketsphinx"
openh264="" ; [ "${openh264:-yes}"  != "no" ]        && openh264="--enable-libopenh264"
sndio=""    ; [ "${sndio:-yes}"     != "no" ]        && sndio="--enable-sndio"
shine=""    ; [ "${shine:-yes}"     != "no" ]        && shine="--enable-libshine"

################################################################################################

libx264=""    ; [ "${X264:-yes}" != "no" ]         && libx264="--enable-libx264"
libcelt=""    ; [ "${CELT:-yes}" != "no" ]         && libcelt="--enable-libcelt"
libdc1394=""  ; [ "${DC1394:-yes}" != "no" ]       && libdc1394="--enable-libdc1394"
libgsm=""     ; [ "${GSM:-yes}" != "no" ]          && libgsm="--enable-libgsm"
librtmp=""    ; [ "${RTMP:-yes}" != "no" ]         && librtmp="--enable-librtmp"
libxvid=""    ; [ "${XVID:-yes}" != "no" ]         && libxvid="--enable-libxvid"
libass=""     ; [ "${ASS:-yes}" != "no" ]          && libass="--enable-libass"
libiec61883=""; [ "${IEC61883:-yes}" != "no" ]     && libiec61883="--enable-libiec61883"
libilbc=""    ; [ "${ILBC:-yes}" != "no" ]         && libilbc="--enable-libilbc"
libmodplug="" ; [ "${MODPLUG:-yes}" != "no" ]      && libmodplug="--enable-libmodplug"
libtwolame="" ; [ "${TWOLAME:-yes}" != "no" ]      && libtwolame="--enable-libtwolame"
ladspa=""     ; [ "${LADSPA:-yes}" != "no" ]       && ladspa="--enable-ladspa"
libflite=""   ; [ "${FLITE:-yes}" != "no" ]        && libflite="--enable-libflite"
libx265=""    ; [ "${X265:-yes}" != "no" ]         && libx265="--enable-libx265"
libzvbi=""    ; [ "${ZVBI:-yes}" != "no" ]         && libzvbi="--enable-libzvbi"
libopencv=""  ; [ "${OPENCV:-no}" != "no" ]       && libopencv="--enable-libopencv"
libgme=""     ; [ "${GME:-yes}" != "no" ]          && libgme="--enable-libgme"
libsnappy=""  ; [ "${SNAPPY:-yes}" != "no" ]       && libsnappy="--enable-libsnappy"
libzmq=""     ; [ "${ZMQ:-yes}" != "no" ]          && libzmq="--enable-libzmq"
libbs2b=""    ; [ "${BS2B:-yes}" != "no" ]         && libbs2b="--enable-libbs2b"
rubberband="" ; [ "${RUBBERBAND:-yes}" != "no" ]   && rubberband="--enable-librubberband"
tesseract=""  ; [ "${TESSERACT:-yes}" != "no" ]    && tesseract="--enable-libtesseract"
libjack=""    ; [ "${JACK:-yes}" != "no" ]         && libjack="--enable-libjack"
libaom=""     ; [ "${AOM:-yes}" != "no" ]          && libaom="--enable-libaom"
lv2=""        ; [ "${LV2:-yes}" != "no" ]          && lv2="--enable-lv2"
libdav1d=""   ; [ "${DAV1D:-yes}" != "no" ]        && libdav1d="--enable-libdav1d"
rabbitmq=""   ; [ "${RABBITMQ:-yes}" != "no" ]     && rabbitmq="--enable-librabbitmq"
libcodec2=""  ; [ "${CODEC2:-yes}" != "no" ]       && libcodec2="--enable-libcodec2"
libsoxr=""    ; [ "${SOXR:-yes}" != "no" ]         && libsoxr="--enable-libsoxr"
libsrt=""     ; [ "${SRT:-yes}" != "no" ]          && libsrt="--enable-libsrt"
libzimg=""    ; [ "${ZIMG:-yes}" != "no" ]         && libzimg="--enable-libzimg"
chromaprint=""  ; [ "${CHROMAPRINT:-yes}" != "no" ] && chromaprint="--enable-chromaprint"
vapoursynth=""  ; [ "${VAPOURSYNTH:-yes}" != "no" ] && vapoursynth="--enable-vapoursynth"
opencore_amr="" ; [ "${OPENCORE:-yes}" != "no" ] && \
  opencore_amr="--enable-libopencore-amrnb --enable-libopencore-amrwb"
fdk=""          ; [ "${FDK_AAC:-yes}" != "no" ]  && \
  { fdk="--enable-libfdk-aac"; non_free="--enable-nonfree" ; }
ssl=""          ; [ "${OPENSSL:-yes}" != "no" ]  && \
  { ssl="--enable-openssl" ; non_free="--enable-nonfree" ; }
decklink=""   ; [ "${DECKLINK:-no}" != "no" ]   && \
  { decklink="--enable-decklink" ; \
    SLKCFLAGS="$SLKCFLAGS -I/usr/include/decklink" ; }
vulkan=""     ; [ "${VULKAN:-yes}" != "no" ]      && vulkan="--enable-vulkan"
libglslang="" ; [ "${GLSLANG:-yes}" != "no" ]     && libglslang="--enable-libglslang"
liblensfun="" ; [ "${LENSFUN:-no}" != "no" ]     && liblensfun="--enable-liblensfun"

# Default enabled features:
fontconfig="" ; [ "${FONTCONFIG:-yes}" != "no" ]  && fontconfig="--enable-libfontconfig"
freetype=""   ; [ "${FREETYPE:-yes}" != "no" ]    && freetype="--enable-libfreetype"
fribidi=""    ; [ "${FRIBIDI:-yes}" != "no" ]     && fribidi="--enable-libfribidi"
gnutls=""     ; [ "${GNUTLS:-no}" != "no" ]       && gnutls="--enable-gnutls"
libbluray=""  ; [ "${BLURAY:-yes}" != "no" ]      && libbluray="--enable-libbluray"
libcaca=""    ; [ "${CACA:-yes}" != "no" ]        && libcaca="--enable-libcaca"
libcdio=""    ; [ "${LIBCDIO:-yes}" != "no" ]     && libcdio="--enable-libcdio"
libssh=""     ; [ "${LIBSSH:-yes}" != "no" ]      && libssh="--enable-libssh"
libtheora=""  ; [ "${THEORA:-yes}" != "no" ]      && libtheora="--enable-libtheora"
libv4l2=""    ; [ "${V4L2:-yes}" != "no" ]        && libv4l2="--enable-libv4l2"
libvorbis=""  ; [ "${VORBIS:-yes}" != "no" ]      && libvorbis="--enable-libvorbis"
libvpx=""     ; [ "${VPX:-yes}" != "no" ]         && libvpx="--enable-libvpx"
libwebp=""    ; [ "${WEBP:-yes}" != "no" ]        && libwebp="--enable-libwebp"
mp3lame=""    ; [ "${LAME:-yes}" != "no" ]        && mp3lame="--enable-libmp3lame"
opencl=""     ; [ "${OPENCL:-yes}" != "no" ]      && opencl="--enable-opencl"
opengl=""     ; [ "${OPENGL:-yes}" != "no" ]      && opengl="--enable-opengl"
openjpeg=""   ; [ "${JP2:-yes}" != "no" ]         && openjpeg="--enable-libopenjpeg"
pulse=""      ; [ "${PULSEAUDIO:-yes}" != "no" ]  && pulse="--enable-libpulse"
samba=""      ; [ "${SAMBA:-yes}" != "no" ]       && samba="--enable-libsmbclient"
libfrei0r=""  ; [ "${FREI0R:-yes}" != "no" ]      && libfrei0r="--enable-frei0r"
libspeex=""   ; [ "${SPEEX:-yes}" != "no" ]       && libspeex="--enable-libspeex"
libopenal=""  ; [ "${OPENAL:-yes}" != "no" ]      && libopenal="--enable-openal"
libopus=""    ; [ "${OPUS:-yes}" != "no" ]        && libopus="--enable-libopus"
libvidstab="" ; [ "${VIDSTAB:-yes}" != "no" ]     && libvidstab="--enable-libvidstab"
libxml2=""    ; [ "${LIBXML2:-yes}" != "no" ]     && libxml2="--enable-libxml2"
librsvg=""    ; [ "${LIBRSVG:-yes}" != "no" ]     && librsvg="--enable-librsvg"
libdrm=""     ; [ "${LIBDRM:-yes}" != "no" ]      && libdrm="--enable-libdrm"

# No default patent encumbered features:
# aac=""        ; [ "${AAC:-yes}" != "no" ]           && aac="--enable-encoder=aac"

rm -rf $PKG
mkdir -p $TMP $PKG
cd $TMP
rm -rf $PKGNAM-$VERSION
tar xvf $CWD/$PKGNAM-$VERSION.tar.xz || exit 1
cd $PKGNAM-$VERSION || exit 1

chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \+ -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \+

# Fix linking with flite:
sed -i "s| -lflite\"| -lflite -lm -lasound\"|" \
  ./configure

CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --shlibdir=/usr/lib${LIBDIRSUFFIX} \
  --docdir=/usr/doc/$PKGNAM-$VERSION/html \
  --mandir=/usr/man \
  --enable-debug \
  --enable-shared \
  --disable-static \
  --enable-gpl \
  --enable-version3 \
  --enable-avresample \
  --enable-lto \
  --arch=$ARCH \
  --logfile=$TMP/ffmpeg-log.txt \
  $pproc \
  $runtime \
  $pthread \
  $resilience \
  $network \
  $mem \
  $ftrapv \
  $perf \
  $non_free \
  $avisynth \
  $bzlib \
  $chromaprint \
  $decklink \
  $gcrypt \
  $gmp \
  $gnutls \
  $iconv \
  $jni \
  $lzma \
  $ladspa \
  $lv2 \
  $liblensfun \
  $libaom \
  $libass \
  $aribb24 \
  $libbluray \
  $libbs2b \
  $libcaca \
  $libcdio \
  $libcelt \
  $libcodec2 \
  $libdav1d \
  $davs2 \
  $libdc1394 \
  $libdrm \
  $libflite \
  $libfrei0r \
  $fdk \
  $fontconfig \
  $freetype \
  $fribidi \
  $libgme \
  $libgsm \
  $libglslang \
  $libiec61883 \
  $libilbc \
  $libjack \
  $kvazaar \
  $mp3lame \
  $mfx \
  $mysofa \
  $libmodplug \
  $libopenal \
  $libopencv \
  $libopus \
  $opencore_amr \
  $openjpeg \
  $openh264 \
  $pulse \
  $librsvg \
  $librtmp \
  $rubberband \
  $rabbitmq \
  $rist \
  $shine \
  $libsnappy \
  $libspeex \
  $libssh \
  $samba \
  $libsoxr \
  $libsrt \
  $svtav1 \
  $libtheora \
  $libtwolame \
  $tesseract \
  $uavs3d \
  $libv4l2 \
  $libvidstab \
  $libvorbis \
  $libvpx \
  $vmaf \
  $voamr \
  $libwebp \
  $libxml2 \
  $libx264 \
  $libx265 \
  $libxvid \
  $xavs2 \
  $xcb \
  $xcbshm \
  $xfixes \
  $xshape \
  $libzmq \
  $libzvbi \
  $libzimg \
  $ssl \
  $opencl \
  $opengl \
  $psphinx \
  $sndio \
  $sdl2 \
  $vaapi \
  $vdpau \
  $vulkan \
  $vapoursynth \
  $xlib \
  $zlib  || exit 1

make $NUMJOBS || make || exit 1
make install DESTDIR=$PKG || exit 1
make install-man DESTDIR=$PKG || exit 1

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | \
  grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

find $PKG/usr/man -type f -exec gzip -9 {} \+

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/txt
cp -a \
  Changelog COPYING* CREDITS INSTALL* LICENSE* MAINTAINERS README* \
  RELEASE VERSION \
  $PKG/usr/doc/$PKGNAM-$VERSION
cp -a doc/*.txt $PKG/usr/doc/$PKGNAM-$VERSION/txt/
find . -name "RELEASE_NOTES" -exec cp -a {} $PKG/usr/doc/$PKGNAM-$VERSION/ \;

# If there's a ChangeLog, installing at least part of the recent history
# is useful, but don't let it get totally out of control:
if [ -r ChangeLog ]; then
  DOCSDIR=$(echo $PKG/usr/doc/${PKGNAM}-$VERSION)
  cat ChangeLog | head -n 1000 > $DOCSDIR/ChangeLog
  touch -r ChangeLog $DOCSDIR/ChangeLog
fi

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $TMP/$PKGNAM-$VERSION-$ARCH-$BUILD$TAG.txz
